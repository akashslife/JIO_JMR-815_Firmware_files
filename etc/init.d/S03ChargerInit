#!/bin/sh
##
## Initialize charger BQ24271 / 24261
#
##Export the relevent interfaces name
#. /usr/local/bin/lte-gw-global-env.sh
#if [ -e /proc/device-tree/wlan_type ]; then
#        WLAN_TYPE=$(cat /proc/device-tree/wlan_type);
#else
#        WLAN_TYPE="ATH"
#fi
#
#if [ -e /proc/device-tree/altair_compatible_hw ] ; then
#	ALTAIR_HW_COMPAT=$(cat /proc/device-tree/altair_compatible_hw);
#else
#	ALTAIR_HW_COMPAT="0"
#fi
#	    
#if [ $PROJECT_TYPE != "PWRT" -o $ALTAIR_HW_COMPAT != "1" ]; then 
#	echo "not PWRT skipping script "$0  > /dev/kmsg       
#	exit 0
#fi
#
#FG_CHIPID=85
#CHRG_CHIPID=107
#FG_I2C_BUS=0
#CHRG_I2C_BUS=0
#
#case "$WLAN_TYPE" in
#	    "ATH")
#		FG_CHIPID=85
#		CHRG_CHIPID=107
#		FG_I2C_BUS=1
#		CHRG_I2C_BUS=1
#        ;;
#	    "RTL"|"RTL8189")
#		FG_CHIPID=85
#		CHRG_CHIPID=107
#		FG_I2C_BUS=0
#		CHRG_I2C_BUS=0
#        ;;
#    	*)
#    	echo "Error: Invalid WLAN_TYPE - $WLAN_TYPE"
#    ;;
#esac
#
#BATTERY_VOLTAGE=`uci get /etc/config/pwrt.battery.voltage`
#
#offset=3500
#let remain=$BATTERY_VOLTAGE-$offset
#
## check communication with fuel gauge
#i2cget -y $FG_I2C_BUS $FG_CHIPID 0xa > /dev/null 2>&1
#if [ $? -ne 0 ]; then
#    #set current limit to 900 mA
#    if [ $WLAN_TYPE == "ATH" ]; then
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 2)
#    else
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 1)
#    fi
#        if [ $? -ne 0 ]; then
#        	echo "Reading current limit Error!"
#                exit
#        fi 		
#        MASK=0x0F
#        RES=$(($MASK & $STT))
#	if [ $WLAN_TYPE == "ATH" ]; then
#        RES=$(($RES | 0x50))
#        STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 2 $RES)
#    else
## ntlr-200 comment out below one line
##        RES=$(($RES | 0x50))
##        STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 1 $RES)
#	echo ""
#    fi
#        echo "2<-$RES"
#        echo "Fuel Gauge reading error - battery does not exist!"
#  	echo "Fuel Gauge reading error - battery does not exist!" > /dev/kmsg
#	
#	echo "*************************"
#	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 0)
#	echo "R0=$STT"
#	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 1)
#	echo "R1=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 2)
#        echo "R2=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 3)
#        echo "R3=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 4)
#        echo "R4=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 5)
#        echo "R5=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 6)
#        echo "R6=$STT"
#        STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 7)
#        echo "R7=$STT"
#        echo "*************************"
#                                                                                                	                
## ntlr-200 comment out below one line
##	charger_watchdog.sh &
#  	exit
#fi
#
#local i=0
#local result=0
#while [ $i -lt 6 ]; do
#        voltage=$((20*$((2**(5-$i)))))
#        if [ ! $voltage -gt $remain ]; then
#                #echo "voltage=$voltage"
#                result=$(($result+$((1<<(7-$i)))))
#                remain=$(($remain-$voltage))
#        fi
#        let i=$i+1
#
#done
#
##set battery voltage
#if [ $WLAN_TYPE == "ATH" ]; then
#	i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 3 $result
#else
#	i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 2 $result
#fi
## ntlr-200 comment out below one line
##charger_watchdog.sh &
#
##check battery present
#if [ $WLAN_TYPE == "ATH" ]; then
#	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 1)
#	MASK=0x06
#	RES=$((($MASK & $STT)>>1))
#else #in RTL - BQ27261 - there is a need to read twice
#	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 0)
#	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 0)
#	MASK=0x07
#	RES=$((($MASK & $STT)))
#fi
#if [ $? -ne 0 ]; then
#        echo "Reading Status Error!"
#        exit
#fi
#
#
#
#echo "RES=$RES"
#
#if [ $RES == 0 ]; then
#
#        #set current limit to 100 mA
#		if [ $WLAN_TYPE == "ATH" ]; then
#        	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 2)
#        else
#        	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 1)
#        fi
#        if [ $? -ne 0 ]; then
#                echo "Reading current limit Error!"
#                exit
#        fi
#        MASK=0x0F
#        RES=$(($MASK & $STT))
#        RES=$(($RES | 0x00))
#		if [ $WLAN_TYPE == "ATH" ]; then
#        	STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 2 $RES)
#	    else
## ntlr-200 comment out below one line
##        	STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 1 $RES)
#		echo ""
#	    fi
#	    #echo "2<-$RES"
#
#        #set safety timer to 6 hours
#		if [ $WLAN_TYPE == "ATH" ]; then
#        	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 7)
#        else
#        	STT=$(i2cget -y $CHRG_I2C_BUS $CHRG_CHIPID 6)
#        fi
#        if [ $? -ne 0 ]; then
#                echo "Reading safety timer Error!"
#                exit
#        fi
#        
#        MASK=0x9f
#        RES=$(($MASK & $STT))
#        RES=$(($RES | 0x20))
#   		if [ $WLAN_TYPE == "ATH" ]; then
#	        STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 7 $RES)
#        else
#	        STT=$(i2cset -y $CHRG_I2C_BUS $CHRG_CHIPID 6 $RES)
#        fi
#        #echo "7<-$RES"
#
#else
#        echo "Battery fault - skip charger initialization"
#fi
#
#
#
